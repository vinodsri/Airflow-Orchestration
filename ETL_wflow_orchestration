
# Import the libraries
from datetime import timedelta
# The DAG object; we'll need this to instantiate a DAG
from airflow.models import DAG
# Operators; you need this to write tasks!
from airflow.operators.bash_operator import BashOperator
# This makes scheduling easy
from airflow.utils.dates import days_ago
import requests

# Define home directory
HOME_DIR = "/home/project/airflow/dags/finalassignment"
STAGING_DIR = os.path.join(HOME_DIR, "staging")

# You can override them on a per-task basis during operator initialization
default_args={
    'owner'='John Doe',
    'start_date'=days_ago(0),
    'email': ['john.doe@gmail.com'],
    'email_on_failure': True,
    'email_on_retry': True,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# Define the DAG
dag = DAG(
    'ETL_toll_data',
    default_args=default_args,
    description='Apache Airflow Final Assignment',
    schedule_interval=timedelta(days=1),
)

# Define task unzip_data to unzip data
unzip_data = BashOperator(
    task_id='unzip-data',
    bash_command = f"cd {HOME_DIR} && tar -xvzf tolldata.tgz",
    dag=dag,
) 

# Define task extract_data_from_csv to extract fields from csv file
extract_data_from_csv = BashOperator(
    task_id='extract-csv',
    bash_command = f"cut -d',' -f1-4 {HOME_DIR}/vehicle-data.csv > csv_data.csv",
    dag=dag,
) 

# Define task extract_data_from_tsv to extract fields from tsv file
extract_data_from_tsv = BashOperator(
    task_id='extract-tsv',
    bash_command = f"cut -f5-7 {HOME_DIR}/tollplaza-data.tsv > tsv_data.csv",
    dag=dag,
) 

# Define task extract_data_from_fixed_width to extract fields from fixed width file
extract_data_from_fixed_width = BashOperator(
    task_id='extract-fixed-width',
    bash_command = f"cut -d',' -f6-7 {HOME_DIR}/payment-data.txt > fixed_width_data.csv",
    dag=dag,
) 

# Define task consolidate_data to unify data extracted from diffent files
consolidate_data = BashOperator(
    task_id='consolidate-data',
    bash_command = f"paste -d',' {HOME_DIR}/csv_data.csv {HOME_DIR}/tsv_data.csv {HOME_DIR}/fixed_width_data.csv > {HOME_DIR}/extracted_data.csv",
    dag=dag,
) 

# Define task transform_data to capitalize vehicle type field value 
transform_data = BashOperator(
    task_id='transform-data',
    bash_command = f"""awk -F',' -v OFS=',' '{{ $4 = toupper($4); print }}' {HOME_DIR}/extracted_data.csv > {STAGING_DIR}/transformed_data.csv""",
    dag=dag,
) 

# Task pipeline
unzip_data >> extract_data_from_csv >> extract_data_from_tsv >> extract_data_from_fixed_width >> consolidate_data >> transform_data
